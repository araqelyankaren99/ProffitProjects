                        1.	JAVA ներածություն ։ Գծային և Ոչ Գծային ալգորիթմներ


1.	Console պատուհանում մուտքագրվում է 2 թիվ  Օրինակ՝ 150 000  և  50 ։
Երբ կսեղմվի Enter կցուցադրվի 150 000-ի 50 % - ը, այսինքն` 75 000 ։

2.	Console պատուհանում մուտքագրվում է 2 թիվ և ցուցադրվում է  մուտքագրված թվի համապատասխան աստիճանը :
Օրինակ՝ 4,2 թվերի դեպքում արդյունքը կլինի՝  4^2=16 :

3.	Պատուհանում մուտքագրվում է վայրկյանների քանակը ։
Մուտքագրված վայրկյանները ձևափոխել ժամ/րոպե/վայրկյան տեսքի և տպել ։
Օրինակ՝ 3725 վայրկյանի դեպքում արդյունքը կլինի՝ 10 ժամ, 2 րոպե, 5 վայրկյան ։

4.	Console-ում տպի մուտքագրված թվի կոտորակային մասը :
Օրինակ՝ եթե մուտքագրվի 45.8, ապա console-ում անհրաժեշտ է գրել 0.8 ։

5.	Պատուհանում մուտքագրվում է թիվ, պետք է ցուցադրել այդ թվի արմատը
Օրինակ 16 - ի դեպքում 4 :

6.	Console-ում գրվում է քառանիշ թիվ: Օրինակ՝ 4565, enter-ի ժամանակ գումարել տվյալ թվի թվանշանները և արդյունքը տպել:
Օրինակ՝ 4565 թվի դեպքում կստանանք 20, այսինքն՝ 4 + 5 + 6 + 5 հուշում :
Օրինակ եթե x = 1234, ապա նրա թվանշաններն անհրաժեշտ է պահել a,b,c,d փոփոխականների մեջ (a=1,b=2,c=3,d=4) :
Օրինակ a թիվը ցույց է տալիս, թե քանի? հազարավոր կա այստեղ :
1234 թվում առաջին թվանշանը 1 -ն է և ցույց է տալիս, որ այս թիվը ունի միայն մեկ հազարավոր ,
հետևաբար առաջին թվանշանը կորոշենք՝  int  a = x/1000; այսինքն՝ 1.234, իսկ int a  =x/1000  դեպքում կստանանք 1 :
Այսպիսով ստացանք առաջին թվանշանը ։


                        2.Պայմանական օպերատոր


1.	Գրել ծրագիր որում կմուտքագրվի թիվ, եթե թիվը մեծ է կամ հավասար 10-ից և փոքր կամ հավասար է 99-ից,
console-ում տպել` թիվը երկնիշ է, հակառակ դեպքում տպել եթե թիվը փոքր է 10-ից բայց մեծ է 0-ից,
console-ում տպել՝ թիվը միանիշ է, մնացած դեպքերում console-ում տպել Error բառը :

2.	Գրել ծրագիր որում կմուտքագրվի 4 թիվ , գտնել և console-ում  տպել  այդ թվերից մեծագույնը :

3.	Համալսարանում գնահատման համար օգտագործվում է գնահատման 100 բալանոց հանակարգը, կամ A, B, C, D համակարգը :
Գրել ծրագիր որում մուտքագրվելով 100 բալանոց համակարգի գնահատականը՝ console-ում տպի տառային գնահատման համակարգը :
Օրինակ մուտքագրելով 87՝ console-ում տպի A և կողքին գրի գերազանց(A գնահատման համար 86 է և ավելի, B-ն՝ 71 և ավելի,
C-ն՝ 40 և ավելի, իսկ մնացած արժեքներ դեպքում D) :

4.	Օգտագործելով switch case՝ գրել ծրագիր, որն առաջարկում է մուտքագրել 2 թիվ,
դրանից հետո ծրագիրն առաջարկում է ընտրել գործողություն +, -, /, *,%
և կախված ձեր մուտքից կտպի այդ երկու թվերի հետ համապատասխան գործողության արդյունքը :


                        3. Ցիկլ(for, while, do while)


1.	Յուրաքանչյուր ամսվա համար բանկը ավելացնում է Ձեր ավանդին գումար ավանդի գումարի 7% -ի չափով :
Գրել ծրագիր, որտեղ օգտագործողը մուտքագրում է ավանդի գումարը և ամսվա քանակը :
Եվ բանկը հաշվարկում է ավանդի վերջնական գումարը, հաշվի առնելով ուրաքանչյուր ամսվա տոկոսադրույքները :
Հաշիվը որոշելու համար օգտագործեք  for ցիկլը :

2.	գրել նախորդ խնդիրը օգտագործելով while :

3.	գրել ծրագիր, որը կստուգի արդյոք մուտք արված թիվը պարզ է,
եթե այո տպի ՞թիվը պարզ է՞ հակառակ դեպքում ՞թիվը պարզ չէ՞ օգտագործեք  for ցիկլը :

4.	գրել նախորդ խնդիրը օգտագործելով do while :

5.	FIZBAZ խնդիր
1.	Անհրաժեշտ է տպել բոլոր երկնիշ թվերը
	Եթե տվյալ թիվը առանց մնացորդի բաժանվում է 4 -ի ապա նրա դիմաց գրել FIZ
	Եթե տվյալ թիվը առանց մնացորդի բաժանվում է 7 -ի ապա նրա դիմաց գրել BAZ
	Եթե թիվը բաժանվում է և 4 -ի և 7 -ի ապա նրա դիմաց գրել FIZBAZ :

6.	a,b,c (ոչ իրար հավասար) թվերը կոչվում են Պյութագորասյան եռյակ, եթե c2=a2+b2
1.	Օրինակ՝ 3,4,5 -ի դեպքում 25 = 16 + 9 :
2.	Ներկառուցված ցիկլերի օգնությամբ տպել մինչև 99 բոլոր Պյութագորասյան եռյակները
(խնդրի լուծման համար 3 ներկառուցված ցիկլ կիրառել) :

7.	Տպել առաջին երկնիշ թիվը, որը 17 -ով բազմապատկելիս ստացվում է 300 -ից մեծ թիվ :

8.	Տպել 8 -րդ երկնիշ թիվը, որը 17 -ով բազմապատկելիս ստացվում է 300-ից մեծ թիվ :


                        Լրացուցիչ


1. օգտագործելով for և if ստանալ
 0
 0 1
 0 2 4
 0 3 6 9
 0 4 8 12 16
 0 5 10 15 20 25
 0 6 12 18 24 30 36
 0 7 14 21 28 35 42 49
 0 8 16 24 32 40 48 56 64
 0 9 18 27 36 45 54 63 72 81


Գրել կոդ,որը կպատկերի հետևյալ եռանկյունները ։

2.  *  *  *  *  *
        *  *  *  *
            *  *  *
                *  *
                    *


3.
                      *
                  *  *
              *  *  *
          *  *  *  *
      *  *  *  *  *


4.           *
           *   *
         *   *   *
       *   *   *   *
     *   *   *   *   *
        *   *   *   *
          *   *   *
            *   *
              *


5.   *   *   *   *   *
         *   *   *   *   *
             *   *   *   *   *
                 *   *   *   *   *
             *   *   *   *   *
          *   *   *   *   *
      *   *   *   *   *


                        4. Միաչափ զանգվածներ


1.	int[] numbers = { -4, -3, -2, -1, 0, 1, 2, 3, 4 }; Գտնել և տպել զանգվածի դրական թվերի քանակը :

2.	int[] numbers = { -4, -3, -2, -1, 0, 1, 2, 3, 4 };  array inversion,այսինքն, տպել այն հակառակ հերթականությամբ :

3.	int[] numbers = { -4, -3, -2, -100, 0, 1, 200, 3, 4 }; գտնել և տպել զանգվածի min և max էլեմենտները :

4.	ստեղծել զանգված որը ունի 20 էլեմենտ, զանգավածի առաջին 2 էլեմենտներնեն 1 և 1,
իսկ 3 էլեմենտից սկսած բոլոր էլեմենտների առժեքները հավասարեն նախորդ երկու էլեմենտների գումարին
(Ֆիբոնաչիի հաջորդականություն) :

5.	Հայտարարել x թվային զանգված .

6.
1.	Ստանալ նոր Y զանգված, որի մեջ ավելացնել X զանգվածի այն տարրերը, որոնք գտնվում են [10,20] հատվածում ։
2.	գտնել տրված զանգվածի երկրորդ մեծագույն տարրը ։

7.	Ստեղծում ենք կլասս ArrayUtil անունով, իրա մեջ էլ main-մեթոդը ։
Ստեղծում ենք int-երի 10 էլեմենտանի միաչափ մասիվ, մեջը լցնելով պատահական թվեր ։
•	Անմիջապես տակը, օգտագործելով մեր ցիկլերի(for) ու պայմանի(if) օպերատորների կիրառմամբ գրում ենք կոդ,
որը կգտնի մեր մասիվի ամենամեծ թիվը :
•	Էլի նույն մասիվը թող մնա հայտարարած, տպեք մասիվի բոլոր զույգ էլեմենտները,
հետո առանձին for-ով կտպեք միայն կենտերը ։
•	Հետո գտեք զույգերի քանակը, և տպեք ։

o	Տպեք զանգվածի բոլոր զույգ թվերի արտադրյալը ։
Օրինակ [2,3,4,5,6]-ի դեպքում կստանանք 48, քանի որ առկա է 3 զույգ թիվ 2, 4 և 6,իսկ 2*4*6 հավասար է 48 :
•	Հետո գտեք մասիվի բոլոր թվերի միջին թվաբանականը (բոլոր էլեմենտների գումարը / էլեմենտների քանակի վրա) :
•	Զանգվածի բոլոր բացասական թվերը դարձնել 0 :
o	Օրինակ՝ [2,4,-5,1,-3,4]-ի դեպքում կստանանք  [2,4,0,1,0,4] ։
•	Սկսում եք մտածել մասիվի էլեմենտները մեծից փոքր դասավորելու վրա :


                        Լրացուցիչ առաջադրանք՝


Տպել զանգվածի այն տարրերը որոնք ավելի մեծ են քան զանգվածի տարրերի միջին թվաբանականը :
Օրինակ․՝ [1,2,3,4,5] -ի դեպքում միջին թվաբանականը կլինի (1+2+3+4+5)/5 = 3 ուստի պետք է տպել 4 և 5 :


                        5.	Երկչափ զանգվածներ

6.	1. Ստեղծել երկչափ զանգված լցնել այն 0-10 էլեմենտներով,  տպել այն,
այնուհետև տպել գլխավոր անկյունագծից ներքև գտնվող տարրերը :

7.	2.Ստեղծել երկչափ զանգված լցնել այն 0-10 էլեմենտներով, տպել այն,
այնուհետև տպել երկրորդական անկյունագծից ներքև գտնվող տարրերը :

8.	3.Ստեղծել երկչափ զանգված լցնել այն 0-10 էլեմենտներով,
տպել այն այնուհետև ստեղծել նոր զանգված, որի մեջ կլինեն յուրաքանչուր տողի փոքրագույն էլեմենտը, տպել այդ նոր զանգվածը:

9.	4.  Ստեղծել երկչափ զանգված լցնել այն 8x8 չափանի, տպել այն այնուհետև ստեղծել հեռացնել գլխավոր և
երկրորդական անկյունագծի վրա գտնվող տարրերը և տպել այն :

Օրինակ՝

10.
	         [0,1][0,2][0,3][0,4][0,5][0,6]
	[1,0]         [1,2][1,3][1,4][1,5]        [1,7]
	[2,0][2,1]         [2,3][2,4]        [2,6][2,7]
	[3,0][3,1][3,2]                 [3,5][3,6][3,7]
	[4,0][4,1][4,2]                 [4,5][4,6][4,7]
	[5,0][5,1]         [5,3][5,4]        [5,6][5,7]
	[6,0]         [6,2][6,3][6,4][6,5]        [6,7]
	         [7,1][7,2][7,3][7,4][7,5][7,6]


11. Երկչափ զանգվածի միջոցով ստանալ հետևյալ պատկերը

	******                        ******
	    ******                ******
	        ******        ******
	            ************
	            ************
	        ******        ******
	    ******                ******
	******                        ******



                        6.Տողային Տիպ


1.	Console  պատուհանում մուտքագրվում է կամայական տեքստ և երբ կսեղմվի Enter արդյունքում կասվի թե
Console -ի մեջ ամենաերկար բառը որն էր ։

2.	Console  պատուհանում մուտքագրվում է կամայական տեքստ և երբ կսեղմվի Enter արդյունքում այս
Console -ից կհեռացվեն կրկնվող բառերը :

3.	Console  պատուհանում մուտքագրվում է կամայական տեքստ: ՈՒնենք նաև երկու փոփոխականներ, որոնք վերցնում են արժեքներ
Console -ից, առաջինում գրվում է x -բառ, իսկ երկրորդում y -բառ : Սեղմելով Enter՝ տեքստում x -բառերը դառնում են y :

4.	Ունենք տեքստ, որը գրված է Console-ի մեջ, Enter սեղմելիս ամեն բառի առաջին և վերջին տառերը դարձնել մեծառտառ :


                        7. Մեթոդներ

1.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական թիվ և կանչում մեթոդը,
մեթոդը տպում է այդ չափսի քառակուսի :

2.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական 2 թիվ և կանչում մեթոդը,
մեթոդը տպում է այդ չափսերի ուղղանկույն :

3.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական թիվ և կանչում մեթոդը,
մեթոդը տպում է  պառզ է արդյոք այդ թիվը թե ոչ :

4.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական զանգված,
մեթոդը տպում է այդ զանգվածի տարերից մեծագույնը :

5.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական զանգված,
մեթոդը տպում է այդ զանգվածի տարերից  փոքրագույնը :

6.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական զանգված,
մեթոդը տպում է այդ զանգվածի տարերը աճման կարգով :

7.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական զանգված,
մեթոդը տպում է այդ զանգվածի տարերը նվազման կարգով :

8.	Գրել ծրագիր որը կունենա մեթոդ, մուտք ենք անում կամայական 2 տեքստեր,
մեթոդը տպում է արդյոք իրար հավասար են թե ոչ :


                        8. Մեթոդներ(2)

1.	Գրել ծրագիր որը կտպի մեզ անհրաժեշտ 3 թվերի գումարը :

2.	Գրել ծրագիր, որը կստուգի մուտքագրված թիվ պոլինդրոմ է, թե ոչ :

3.	Գրել ծրագիր Ֆիբոնաչիի հաջորդականությունը( առաջին 2 էլեմենտներնեն 0 և 1, իսկ 3 էլեմենտից սկսած բոլոր էլեմենտների
առժեքները հավասարեն նախորդ երկու էլեմենտների գումարին) օգտագործելով (առանց ռեկուրսիայի) :

4.	Գրել ծրագիր Ֆիբոնաչիի հաջորդականությունը օգտագործելով ռեկուրսիա :

5.	Գրել ծրագիր, որը մուտքագրված թիվը կբերի երկուական համակարգի :
Օրինակ 5 երկուական համակարգում կլինի 101, իսկ 11 երկուական համակարգում կլինի 1011 :

6.	Գրել ծրագիր, որը մուտքագրված թիվը կբերի ութական համակարգի
Օրինակ 5 ութական համակարգում կլինի 5 (քանի որ 5<8), իսկ 9 ութական համակարգում կլինի 11 :


                        Լրացուցիչ


public class StringUtil {

//Տրված տեքստից ջնջում ենք սկզբի և վերջի բացատները(պռաբելները) և
//արդյունքը վերադարձնում ենք
     public String trim(String text) {
           return "";
     }

//Վերադարձնում է true եթե տրված տեքստը սկսվում է տվյալ բառով
// հակառակ դեպքում false
     public boolean startsWith(String text, String symbol){
           return true;
    }

//Վերադարձնում է true եթե տրված տեքստը վերջանում է տվյալ բառով
// հակառակ դեպքում false
     public boolean endsWith(String text, String symbol){
           return true;
    }

//Վերադարձնում ենք տրված տեքստի մեջ տրված սինվոլի քանակը․
     public int getCountBySymbol(String text, char symbol) {
           return 0;
     }

//Վերադարձնում ենք տրված տեքստի մեջ տրված սինվոլների ընդհանուր
//քանակը․
    public int getCountBySymbols(String text, char[] symbols) {
          return 0;
    }

//Վերադարձնում է մեջտեղի 2 տառերը
    public String middleTwo(String str) {
          return "";
    }

//Վերադարձնում է true եթե տրված տեքստը վերջանում է ly-ով, հակառակ
//դեպքում false
  public boolean endsLy(String str) {
       return false;
  }

//Եթե front-փոփոխականը տանք true կվերադարձնի տրված str-ի առաջին
//տառը, հակառակ դեպքում վերջինը։
   public String theEndOrFront(String str, boolean front) {
        return "";
   }

//վերադարձնում է true, եթե տրված տեքստը սկսվում է bad բառով,
// կամ 2-րդ տառից սկսած է պարունակում bad բառը։ օր․ xbadxx -> true,
//xxbadxx -> false
   public boolean hasBad(String str) {
         return false;
   }

 //Վերադարձնում է առաջին 2 տառերը։ օր․ Hello-> He
   public String firstTwo(String str) {
          return "";
   }

//Վերադարձնում է true եթե տեքստը պարունակում է bob բառը, բայց o-ի
//տեղը կարող է լինել ցանկացած սինվոլ։
//օր․ abcbob → true, b9b -> true, բայց ասենք bac-> false
   public boolean bobThere(String str) {
         return false;
  }

//Վերադարձնում է տրված տեքստի վերջին n քանակի սինվոլները n
//անգամ
//օր․ ("Hello", 3) → "llollollo", ("Hello", 2) → "lolo", ("Hello", 1) → "o"
   public String repeatEnd(String str, int n) {
          return "";
   }

//Վերադարձնում ենք տրված տեքստի revers եղած տարբերակը․
   public String reverse(String str){
       return "";
   }
}


                        9.	Կլասսներ ներածություն


Ստեղծել Student կլասը, որը ունի հետևյալ դաշտերը՝
1.	Անուն
2.	Ազգանուն
3.	Տարիք
4.	Գնահատական
5.	Դասարան
________________________________________
Այդ կլասից ստեղծել 5 օբյեկտ և նրանց պահել ընդհանուր զանգվածի մեջ ։

Ցիկլի օգնությամբ զանգվածից տպել բոլոր ուսանողների անունները և ազգանունները :
Դրա համար կիրառել Info ֆունկցիան. Այսինքն պետք է յուրաքանչյուր ուսանողի համար կանչել այդ ֆունկցիան :
Այն հայտարարել կլասի ներսում :

1.	Պետք է տպել այս զանգվածում եղած ուսանողների միջին գնահատականը :

2.	Պետք է տպել այն ուսանողին, ով ունի ամենաբարձր գնահատականը :

3.	Պետք է տպել ավարտական (12 -րդ) դասարանի ուսանողների անունները և տարիքները :

4.	5 րդ դասարանի ուսանողներին տպել և ամեն մեկի անունի կողքին գրել գերազանցիկ եթե նրա գնահատականը մեծ է 9 ից,
հարվածային եթե գնահատականը 7 ից 9 է , մնացած դեպքում տպել միջակ :


                        10. Կլասների և մեթոդների մանրամասը քննարկում, կոմպոզիցիա


Ունենք Worker կլասը, որն  ինֆորմացիա է պարունակում աշխատողի մասին: Ունենք նաև Education կլասը,
որը ինֆորմացիա է պարունակում կրթության մասին (համալսարան, որ թվից, որ թիվը և այլն) :

1.	Ստեղծել աշխատողների զանգված (Generic List) և տպել տվյալները էկրանին հետևյալ տրամաբանությամբ :

2.
1.	Անուն ազգանուն և կոչում (եթե սովորել է 4 տարի՝ բակալավր, 6 տարի՝ մագիստրոս, 8 տարի՝ ասպիրանտ)
2.	printSort մեթոդի օգնությամբ տվյալները տպել աճման կարգով ըստ սովորած տարիների քանակի
3.	printCount մեթոդի միջոցով տպել այն մարդկանց տվյալները, որոնք սովորել են 5 տարուց ավել :


                        11. OOP սկզբունքներ - ինկապսուլացիա , ժառանգում


Developer կլասի ներսում, ունենք name, surname ,age, experience(փորձ տարիների) և languages դաշտերը,
որտեղ languages -ը ցույց է տալիս ծրագրավորման լեզուների զանգվածը :
Կլասից ժառանգվում են FrontEndDeveloper, BackendDeveloper, FullStackDeveloper կլասները :
Program -ում ունենալ Developer -ների զանգված, որոնց մի մասը Front է, մի մասը Back, մի մասը՝ Full :
Ցիկլի օգնությամբ յուրաքանչյուրի համար կանչել Developer կլասի write մեթոդը, որը էկրանին
կտպի ծրագրավորողի անունը և նրա լեզուների իմացությունը :
Հաշվել, թե քանի ծրագրավորող կա տրված զանգվածում, որ տիրապետում է Java -ին :


                        12. OOP սկզբունքներ - պոլիմորֆիզմ


Ունենք 3 կլաս՝

1.	Rectangle  - koxm1, koxm2
2.	Triangle    - koxm1, koxm2, koxm3
3.	Square      - koxm1, koxm2
________________________________________
Այս կլասներում առկա են պարագիծ և մակերես հաշվող մեթոդներ :
Երբ բացվում է Console պատուհանը, ցուցադրվում է հետևյալ հաղորդագրությունը.
Please choose which object you want :

Type 1 for Rectangle,
     2 for Triangle ,
     3 for square.

Օգտատերը կմուտքագրի համապատասխան թիվը, այսպիսով կընտրվի պատկերի տեսակը.
Այնուհետև պետք է մուտքագրվեն ընտրված օբյեկտի կողմերի երկարությունները հատ առ հատ
(triangle -ի դեպքում 3 թիվ պետք է գրվի) :
________________________________________
Այս ամենից հետո վերջին անգամ է հարց տրվում.
Please choose one of the options.

1 for Perimeter ,
2 for Area :

Ընտրելով տարբերակներից մեկը՝ պետք է ցուցադրել տվյալ օբյեկտի համար, մուտքագրված թվերով կատարված հաշվարկը :


                        13. OOP Ինտերֆեյս,աբստրակցիա

Նոր package ենք սարքում list անունով, որտեղ ունենալու ենք`
User կլասս որը ունենալու է name,surname,username,password դաշտերը, բոլորը private ու իրանց բոլորի get-set մեթոդները,
նաև 2 կոնստրուկտոր, մեկը բոլոր պարամետրերով, մյուսը առանց պարամետրերի ։
Պետք է ունենանք պահոց User -ի համար անունը դրեք DataStorage :
Պետք է գրել ListTest, որտեղից էլ պետք է կատարել սքանների տվյալների ներմուծումը, հրամանները, ու կանչը DataStorage :
Ամենասկզբից երբ աշխատացնենք մեր ծրագիրը, պետք է լինի 3 հրաման.

0 Exit,
1 Login,
2 Registration

0․ Ծրագիրը փակվում է,
1․ Սքաներով վերցնում է username,password ու եթե ճիշտ է տպում է բարի գալուստ, ու անունը, ու ծրագիրը վերջանում է
2․ Սքաններով տալիս ենք name,surname,username,password ստեղծում ենք User տիպի օբյեկտ, ու պահում ենք DataStorage մեջ ։

Գրանցելուց հետո կգրի Շնորհակալություն դուք գրանցվել եք, ու նորից կտպի հրամանները,
ու որ դրանից հետո նույն username password-ով լոգին լինենք, արդեն կգրի 'Բարի գալուստ ու անունը' ։


                        14. Exception Handling


1. User package պրոյեկտում մշակել բոլոր հմարավոր exception-ները, որորնք կարող են հանդիպել user գրանցելուց :
ԱվեԱվելացնել Work կլասս, որի ունենալու է name, start, end։ User կլասսին ավելացնել Work[]  work(Կոմպոզիցիա) ։
ԳրաԱվենցելու ենք միայն գրանցվող աշխատողներին( Նման է Book-ին) ։

2. User-ի ավելացնելու ժամանակ ստուգի եթե նման surname կա ապա չգրանցի :

3. Ներմուծելով user-ի  անուն ազգանունը ցուցադրի ուսանողի բոլոր տվյալները :

4.Եթե գրանցում ենք  user-ին և չենք տալիս աշխատատեղը չթողնի գրանցել :


                        15. Inner Classes


Ստեղծում ենք նոր պրոյեկտ(այսինքն առանձին package)educationCenter անունով՝
պետք է ունենանք Ուսանող(Student), Առարկա (Lesson).
Ուսանողը ունենում է (name, surname, phone, email, registerDate, lessons, ratings).
քանի որ մի ուսանողը կարող է ունենա մի քանի առարկաներ ուրեմն lessons-ը կլինի Lesson[ ];
քանի որ մի ուսանողը կարող է ունենա մի քանի գնահատկան ուրեմն ratings կլինի Ratings[ ](Inner Class);
registerDate-ը գրանցման ամսաթիվն է, որը պետք է լինի Date տիպի․
Առարկան պետք է ունենա (name, duration, price, lecturerName);
duration-ը պահում ենք int այսինք ժամերով․
Բնականաբար ունենում ենք այս օբյեկտներին հարմարացված StudentStorage և LessonStorage:
Լինելու են հետևյալը՝

EXIT = 0;
ADD_STUDENT = 1;
ADD_LESSON = 2;
PRINT_STUDENTS = 3;
PRINT_LESSONS = 4;
CHANGE_STUDENT_LESSON = 5;
PRINT_STUDENTS_BY_LESSON_NAME = 6 :

CHANGE_STUDENT_LESSON -ի դեպքում պետք է սկզբից բերի բոլոր ուսանողներին, մենք գրենք էն ուսանողի անունը ,
որը ուզում ենք փոխել, հետո բերի բոլոր առարկաների անունները ու մենք կարողանանք ստորակետով տանք առարկաների անունները։
Հետո առարկաների անունները split-ով կունենա, ու գետ կանի որպես սսիլկա, որ դնի ուսանողի lessons-ին ։


                        16. Collection, List ինտերֆեյս, ArrayList և LinkedList

Ունեք  student կլասներ , ստեղծել մեթոդ որը կանչելիս կստեղծվի ուսանող որը կունենա  կամայական 10 գնահատակաների list,
ինչպես նաև ուսանողին կտա կամայական տարիք 16-30 սահմանում :

ստեղծել մեթոդ որը 10 ուսանող կխմբավորի list մեջ,
ստեղծել մեթոդ որը այդ ուսանողնեին կդասավորի ըստ տարիքի,
ստեղծել մեթոդ որը կանչելիս այդ խումբի դասավորվածությունը կխառնի կամայական կերպ.
մեթոդները պատկանալու են class program և նրանց փոխանցվելու է կամ student  կամ մեկ մեթոդը կանչելու եք այլ մեթոդից,
օրինակ createGroup մեջ կանչումեք createStudent :


                        17. Collection,Set ինտերֆեյս,TreeSet, HashSet և LinkedHashSet


Նախորդ տնայինին ավելացնում ենք հետևյալ մեթոդները՝
ավելացնել Lesson կլաս, student-ը կունենա Lesson-ի set որտեղ առարկանեերը չեն կրկնվելու
(Lesson կլասը ունի name, price, count տվյալ դեպքում):
Ունենալու եք մեթոդ որի միջոցով կտպենք բոլոր Lesson-ները սորտավորելով ըստ

1․ name
2․ price
3․ count


                        18. Map ինտերֆեյս,TreeMap, HashMap և LinkedHashMap

Գրում ենք ծրագիր, որը իրենից ներկայացնում է բլոգ։
Բլոգը կունենա այցելուներ, որոնք պարտադիր չէ որ գրանցված լինեն,
իսկ բլոգի հոդված գրողները պետք է պարտադիր գրանցված լինեն ։
Ունենալու ենք հետևյալ հասկացությունները ։

User(name,surname,email,password)

Post(title,post,category(String թե ինչ կատեգորիայի է պատկանում մեր գրառումը),
createdDate, author(User))(user իրենից ներկայացնում է կոմպոզիցյա՝ private User user) :

Հենց միացրեցինք ծրագիրը, պետք է տպի բոլոր փոստերը, և հեղինակների անունները ։

Դե մեր դեպքում առաջի անգամ դատարկ կլինի, հետո որ լոգաութ եղանք, արդեն կլինի գրառումներ
ամենավերջում գրի հետևյալ հրամանները .

EXIT,
POSTS_BY_CATEGORY,
POSTS_BY_USER,
LOGIN,
REGISTER
POSTS_BY_CATEGORY - տալու ենք կատեգորիայի անունը, բերելու է փոստերը
POSTS_BY_USER - տալու ենք հեղինակի email-ը բերի նրա գրած բոլոր փոստերը։
LOGIN-ի ժամանակ էլի կբերի բոլոր փոստերը, իսկ վերևում կունենանք հետևյալ հրամանները։
ADD_POST - ավելացնում է փոստ
LOGOUT


                        19. Generics,Queue


Ստեղծում ենք նոր պրոյեկտ(այսինքն առանձին package) myGenerics անունով՝
պետք է ունենանք Gen< K , V> class, որը ունի x, y և  z փոփոխականները :
Ստեղծելու ենք Main class, որի մեջ արդեն կունենանք Gen<K, V> օբյեկտ ։
Հետո ստեղծելու եք տվյալ օբյեկտներից զանգված ։
Տվյալ կլասի մեջ պիտի լինեն հետևյալ մեթոդները.

1.	Եթե ստեղծեմ 2 նույն օբյեկտը, ապա երկրորդը չավելացնի(նույնն է համարվում այն դեպքում,
երբ և K-ի և V -ի արժեքները համընկնում են),ընդ որում ասի, որ արժեքի հավասարության դեպքում չի տպել :

2.	Կանչելով մեթոդը տպի տվյալ օբյեկտը և իր տիպը :


                        20. InputStream և OutputStream


Գրում եք FileUtil class մեջը հետևյալ static մեթոդները ։
//Տված ֆայլի մեջ կատարում է ստուգում, տպում է true եթե keyword բառը կա տվյալ ֆայլում,
//հակառակ դեպքում տպում է false։

public static void printBooleanByKeyword(String filePath, String keyword){
}

//Տված directory-ից սկսած ռեկուրսիվ ման կգանք բոլոր ֆոլդերների վրա, որտեղ տեսանք txt
//ֆայլ, ման կգանք այդ ֆայլի մեջ տված keyword-ով և կտպի թե որ ֆայլի մեջ է (կտպենք ֆայլի
//փաթը և անունը).

public static void printLineByKeywordOnDir(String dirPath, String keyword){
}


                        21. Reader և Writer, serialization

Մեր տնայինի մեջ, ավելացնելու ենք ֆայլային համակարգի հետ աշխատանքը, որի արդյունքում չենք ունենա տվյալների կորուստ,
երբ փակենք և բացենք ծրագիրը ։
Այսինքն միատ կլասս ենք սարքում SerializeUtil անունով, ու իրա մեջ կարող եք համապատասխան մեթոդները գրել,
ընդ որում ստատիկ ։
Oրինակ serializeUserMap(Map<String,User> userMap){} ու այստեղ սերիալիզացնում էք մապ-ը ու պահում ֆայլի մեջ,
կունենաք նաև Map<String,User> deserializeUserMap(){} որը դեսերիալայզ կանի, նույնն էլ մնացածի համար ։
Storage ներում համապատասխան տեղերում կկանչեք էդ մեթոդները ։


                        22. Թվարկում, ավտոփաթեթավորում և Regex

Որպես տնային, նոր package ենք սարքում Password անունով, որտեղ ունենալու ենք` User կլասս որը ունենալու է
name,surname,username,password դաշտերը, բոլորը private ու իրանց բոլորի get-set մեթոդները,
նաև 2 կոնստրուկտոր, մեկը բոլոր պարամետրերով, մյուսը առանց պարամետրերի ։
Պետք է գրել ListTest, որտեղից էլ պետք է կատարել սքանների տվյալների ներմուծումը, հրամանները, ու կանչը,
բոլոր տվյալները կահում ենք  ֆայլային համակարգում :
Ամենասկզբից երբ աշխատացնենք մեր ծրագիրը, պետք է լինի 3 հրաման ։

0 Exit,
1 Login,
2 Registration

0․ Ծրագիրը փակվում է,
1․ Սքաներով վերցնում է username,password ու եթե ճիշտ է տպում է բարի գալուստ, ու անունը, ու ծրագիրը վերջանում է
2․ Սքաններով տալիս ենք name,surname,username,password ստեղծում ենք User տիպի օբյեկտ ։
Ծածկագրի համար հարկավոր է գրել մեթոդ, որը կստուգի համապատասխանում է տվյալ ծածկագիրը թե ոչ ։
Որպիսի ծածկագիրը լինի ճիշտ և user-ը գրանցվի հարկավոր է բավարարի հետևյալ պայմաններին
( ստուգումները փորձում ենք կատարել regex-ների միջոցով).
•	պարունակի տառեր
•	չսկսվի թվով
•	չպարունակի բացատ
•	չի կարող ունենալ միջին գիծ, փակագիծ, շեղագիծ :

Գրանցելուց հետո կգրի Շնորհակալություն դուք գրանցվել եք, ու նորից կտպի հրամանները,
ու որ դրանից հետո նույն username password-ով լոգին լինենք, արդեն կգրի Բարի գալուստ ու անունը ։


                        23. Thread


Ստեղծել նոր փեքիջ taskManagement անունով ։
Նպատակն է ստեղծել ծրագիր, որը թույլ կտա օֆֆիսի մենեջերին գրանցել իր աշխատողներին, ու տալ թասկեր (առաջադրանքներ) ։
Աշխատողը կմտնի համակարգ, կտեսնի իր առաջադրանքները, կունենա հնարավորություն փոփոխել առաջադրանքի ժամանակը
(քանի ժամ է պետք) և ստատուսը(թե ինչ փուլում է գտնվում թասկը) ։
Պետք է ունենանք հետևյալ մոդելները՝
User(name,surname, email, password, type("MANAGER","USER"))
type միջոցով ծրագիրը կտարբերի մտնող user-ին MANAGER է թե USER,
այսինքն լոգինի ժամանակ ստուգում ենք ոչ միայն լոգինն ու ծածկագիրը այլ նաև տիպը(type)
նախապես լինելու է հետևյալը
0 EXIT
1 LOGIN
մենեջերին նախապես ծրագրում գրանցում եք
(User user = new User("Anna","Anyan","an@mail.ru","anna","MANAGER" ) հետևյալ տարբերակով,
իսկ մենեջերը արդեն մնացած աշխատողներին կգրանցի)
Task(title,desc,estimate(long պտի էղնի, թե քանի ժամ), assignTo(թե որ յուզերը պտի անի) createdDate,
status("NEW","InProgress","Finished") )
Էլի Manager- մեին մեթոդի մեջ քցեք, իրա համար գրանցում պետք չէ ։

Manager-ի հրամաններն են.
0 LOGOUT
1 ADD User
2 ADD Task
3 Print All Tasks
4 Print All Users
5 Print Tasks By Status

User-ի հրամաններն են։
0. LOGOUT
1. Print my new Tasks
2. Print my current Tasks
3. Print my finished Tasks
4. Change My Task Status by Name
5. Change My Task Estimations by Name


                        24. Synchronization

Նախորդ տնայինին ավելացնում եք Manager-ի և User-ի համար

6. ChangeYourPassword

Իսկ միայն Manager-ի համար ավելացնում եք

7. DeleteUserByEmail

Մենեջերը կկարողանա ջնջել user-ին
